openapi: 3.0.1
info:
  title: Order API
  description: 주문 정보를 관리하는 API 입니다
  version: 0.0.1
servers:
- url: https://api.odlab.kr
tags: []
paths:
  /orders:
    post:
      tags:
      - Order
      summary: 주문 등록 API
      description: 상품 예약 정보를 기반으로 주문을 등록하는 API 입니다. <br><br>테스트시 우측 자물쇠를 클릭하여 유효한
        인증 토큰을 입력해야 정상 테스트가 가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[register_order] "
      parameters:
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: Bearer testToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[request] register_order"
            examples:
              '[register_order] 받는 사람 전화번호 미입력':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    } ],
                    "totalPrice" : 50000,
                    "receiverName" : "홍길동",
                    "receiverTel" : "   ",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
              '[register_order] success':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    }, {
                      "productId" : 2,
                      "reserveId" : 101
                    } ],
                    "totalPrice" : 50000,
                    "receiverName" : "홍길동",
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
              '[register_order] 예약 확정 실패':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    }, {
                      "productId" : 2,
                      "reserveId" : 101
                    } ],
                    "totalPrice" : 50000,
                    "receiverName" : "홍길동",
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
              '[register_order] 예약 정보 미입력':
                value: |-
                  {
                    "reserveInfos" : null,
                    "totalPrice" : 50000,
                    "receiverName" : "홍길동",
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
              '[register_order] 받는 사람 주소 미입력':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    } ],
                    "totalPrice" : 50000,
                    "receiverName" : "홍길동",
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : null
                  }
              '[register_order] 인증 토큰 미입력 혹은 만료된 토큰 입력':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    }, {
                      "productId" : 2,
                      "reserveId" : 101
                    } ],
                    "totalPrice" : 50000,
                    "receiverName" : "홍길동",
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
              '[register_order] 받는 사람 이름 미입력':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    } ],
                    "totalPrice" : 50000,
                    "receiverName" : null,
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
              '[register_order] 예약 정보 없음':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    }, {
                      "productId" : 2,
                      "reserveId" : 101
                    } ],
                    "totalPrice" : 50000,
                    "receiverName" : "홍길동",
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
              '[register_order] 총 금액 미입력':
                value: |-
                  {
                    "reserveInfos" : [ {
                      "productId" : 1,
                      "reserveId" : 100
                    } ],
                    "totalPrice" : null,
                    "receiverName" : "홍길동",
                    "receiverTel" : "010-1234-5678",
                    "receiverAddress" : "서울시 강남구 테헤란로 123"
                  }
      responses:
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[register_order] 받는 사람 전화번호 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1099,
                        "errorMessage" : "받는사람 전화번호는 필수값 입니다"
                      }
                    }
                '[register_order] 예약 정보 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1099,
                        "errorMessage" : "예약 정보는 필수값 입니다"
                      }
                    }
                '[register_order] 받는 사람 주소 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1099,
                        "errorMessage" : "받는사람 주소는 필수값 입니다"
                      }
                    }
                '[register_order] 받는 사람 이름 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1099,
                        "errorMessage" : "받는사람 이름은 필수값 입니다"
                      }
                    }
                '[register_order] 총 금액 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1099,
                        "errorMessage" : "총 금액은 필수값 입니다"
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] register_order"
              examples:
                '[register_order] success':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "result" : true,
                        "orderNumber" : 12345
                      }
                    }
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[register_order] 예약 확정 실패':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4009,
                        "errorMessage" : "ALREADY_CONFIRMED - 이미 확정된 예약입니다 - 1"
                      }
                    }
                '[register_order] 예약 정보 없음':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4009,
                        "errorMessage" : "NOT_FOUND - 예약 정보를 찾을 수 없습니다 - 100"
                      }
                    }
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[register_order] 인증 토큰 미입력 혹은 만료된 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3099,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
  /orders/buy-products:
    get:
      tags:
      - Order
      summary: 고객 주문 목록 조회 API
      description: 로그인한 고객의 주문 목록을 조회하는 API 입니다. <br><br>테스트시 우측 자물쇠를 클릭하여 유효한 인증
        토큰을 입력해야 정상 테스트가 가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[find_customer_orders] "
      parameters:
      - name: page
        in: query
        description: "페이지 번호 (기본값: 0)"
        required: false
        schema:
          type: string
      - name: size
        in: query
        description: "페이지 크기 (기본값: 10)"
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: testToken
      responses:
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[find_customer_orders] 인증 토큰 미입력 혹은 만료된 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3099,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[find_customer_orders] 상품 정보 조회 실패':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4009,
                        "errorMessage" : "NOT_FOUND - 상품 정보를 찾을 수 없습니다"
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] find_customer_orders"
              examples:
                '[find_customer_orders] success':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "pageNumber" : 0,
                        "pageSize" : 10,
                        "totalElements" : 2,
                        "totalPages" : 1,
                        "orderList" : [ {
                          "orderNumber" : 12345,
                          "orderDateTime" : "2025-01-15T10:30:00",
                          "primaryProductName" : "나이키 에어맥스",
                          "primaryProductImg" : "https://example.com/image1.jpg",
                          "primaryProductBuyStatus" : "배송중",
                          "totalProductCnt" : 2,
                          "totalPrice" : 150000
                        }, {
                          "orderNumber" : 12346,
                          "orderDateTime" : "2025-01-16T14:20:00",
                          "primaryProductName" : "아디다스 울트라부스트",
                          "primaryProductImg" : "https://example.com/image2.jpg",
                          "primaryProductBuyStatus" : "배송완료",
                          "totalProductCnt" : 1,
                          "totalPrice" : 200000
                        } ]
                      }
                    }
  /orders/reservation:
    post:
      tags:
      - Order
      summary: 상품 예약 API
      description: 주문 전 상품을 예약하는 API 입니다. <br><br>테스트시 우측 자물쇠를 클릭하여 유효한 인증 토큰을 입력해야
        정상 테스트가 가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[reserve_product] "
      parameters:
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: Bearer testToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[request] reserve_product"
            examples:
              '[reserve_product] 이미 예약된 상품':
                value: |-
                  [ {
                    "productId" : 1,
                    "quantity" : 2
                  }, {
                    "productId" : 2,
                    "quantity" : 1
                  } ]
              '[reserve_product] success':
                value: |-
                  [ {
                    "productId" : 1,
                    "quantity" : 2
                  }, {
                    "productId" : 2,
                    "quantity" : 1
                  } ]
              '[reserve_product] 재고 부족':
                value: |-
                  [ {
                    "productId" : 1,
                    "quantity" : 2
                  }, {
                    "productId" : 2,
                    "quantity" : 1
                  } ]
              '[reserve_product] 인증 토큰 미입력 혹은 만료된 토큰 입력':
                value: |-
                  [ {
                    "productId" : 1,
                    "quantity" : 2
                  }, {
                    "productId" : 2,
                    "quantity" : 1
                  } ]
              '[reserve_product] 상품 정보 없음':
                value: |-
                  [ {
                    "productId" : 1,
                    "quantity" : 2
                  }, {
                    "productId" : 2,
                    "quantity" : 1
                  } ]
      responses:
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[reserve_product] 이미 예약된 상품':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4009,
                        "errorMessage" : "ALREADY_RESERVED - 이미 예약된 상품입니다 - 1"
                      }
                    }
                '[reserve_product] 재고 부족':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4009,
                        "errorMessage" : "OUT_OF_STOCK - 재고가 부족합니다 - 1"
                      }
                    }
                '[reserve_product] 상품 정보 없음':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4009,
                        "errorMessage" : "NOT_FOUND - 상품 정보를 찾을 수 없습니다 - 1"
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] reserve_product"
              examples:
                '[reserve_product] success':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : [ {
                        "productId" : 1,
                        "reserveId" : 100
                      }, {
                        "productId" : 2,
                        "reserveId" : 101
                      } ]
                    }
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[reserve_product] 인증 토큰 미입력 혹은 만료된 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3099,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
  /orders/sold-products:
    get:
      tags:
      - Order
      summary: 판매 상품 목록 조회 API
      description: 판매자가 판매한 상품 목록을 조회하는 API 입니다. <br><br>테스트시 우측 자물쇠를 클릭하여 유효한 인증
        토큰을 입력해야 정상 테스트가 가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[find_sold_products] "
      parameters:
      - name: searchType
        in: query
        description: "검색 타입 (customerId, productId,  buyStatus)"
        required: false
        schema:
          type: string
      - name: query
        in: query
        description: 검색어
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: "페이지 번호 (기본값: 0)"
        required: false
        schema:
          type: string
      - name: size
        in: query
        description: "페이지 크기 (기본값: 10)"
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: Bearer testToken
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] find_sold_products"
              examples:
                '[find_sold_products] success':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "pageNumber" : 0,
                        "pageSize" : 10,
                        "totalElements" : 2,
                        "totalPages" : 1,
                        "orderList" : [ {
                          "orderProductId" : 1,
                          "customerId" : 100,
                          "productName" : "나이키 에어맥스",
                          "productPrice" : 150000,
                          "buyQuantity" : 2,
                          "buyStatus" : "배송중",
                          "regDateTime" : "2025-01-15T10:30:00"
                        }, {
                          "orderProductId" : 2,
                          "customerId" : 101,
                          "productName" : "아디다스 울트라부스트",
                          "productPrice" : 200000,
                          "buyQuantity" : 1,
                          "buyStatus" : "배송완료",
                          "regDateTime" : "2025-01-16T14:20:00"
                        } ]
                      }
                    }
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[find_sold_products] 상품 정보 조회 실패':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4009,
                        "errorMessage" : "NOT_FOUND - 상품 정보를 찾을 수 없습니다"
                      }
                    }
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[find_sold_products] 인증 토큰 미입력 혹은 만료된 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3099,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
  /orders/{orderId}:
    delete:
      tags:
      - Order
      summary: 주문 취소 API
      description: 주문을 취소하는 API 입니다. <br><br>테스트시 우측 자물쇠를 클릭하여 유효한 인증 토큰을 입력해야 정상
        테스트가 가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[cancel_order] "
      parameters:
      - name: orderId
        in: path
        description: ""
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: testToken
      responses:
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[cancel_order] 인증 토큰 미입력 혹은 만료된 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3099,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[cancel_order] 조회된 주문 없음':
                  value: |-
                    {
                      "httpStatus" : 404,
                      "message" : "NOT_FOUND",
                      "data" : {
                        "errorCode" : 2004,
                        "errorMessage" : "조회된 주문 정보가 없습니다"
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] cancel_order"
              examples:
                '[cancel_order] success':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "result" : true
                      }
                    }
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] error"
              examples:
                '[cancel_order] 주문한 사용자가 아님':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4008,
                        "errorMessage" : "상품을 구매한 사용자만 요청을 처리할 수 있습니다"
                      }
                    }
                '[cancel_order] 이미 취소처리된 상품':
                  value: |-
                    {
                      "httpStatus" : 500,
                      "message" : "INTERNAL_SERVER_ERROR",
                      "data" : {
                        "errorCode" : 4007,
                        "errorMessage" : "이미 취소처리된 상품 입니다"
                      }
                    }
components:
  schemas:
    '[response] register_order':
      title: "[response] register_order"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - orderNumber
          - result
          type: object
          properties:
            result:
              type: boolean
              description: 주문 처리 결과
            orderNumber:
              type: number
              description: 주문 번호
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[response] find_customer_orders':
      title: "[response] find_customer_orders"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - orderList
          - pageNumber
          - pageSize
          - totalElements
          - totalPages
          type: object
          properties:
            pageNumber:
              type: number
              description: 현재 페이지 번호
            totalPages:
              type: number
              description: 전체 페이지 수
            orderList:
              type: array
              description: 주문 목록
              items:
                required:
                - orderDateTime
                - orderNumber
                - primaryProductBuyStatus
                - primaryProductImg
                - primaryProductName
                - totalPrice
                - totalProductCnt
                type: object
                properties:
                  totalProductCnt:
                    type: number
                    description: 전체 상품 개수
                  orderDateTime:
                    type: string
                    description: 주문 일시
                  orderNumber:
                    type: number
                    description: 주문 번호
                  totalPrice:
                    type: number
                    description: 총 금액
                  primaryProductName:
                    type: string
                    description: 대표 상품명
                  primaryProductImg:
                    type: string
                    description: 대표 상품 이미지 URL
                  primaryProductBuyStatus:
                    type: string
                    description: 대표 상품 구매 상태
            pageSize:
              type: number
              description: 페이지 크기
            totalElements:
              type: number
              description: 전체 요소 수
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[response] find_sold_products':
      title: "[response] find_sold_products"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - orderList
          - pageNumber
          - pageSize
          - totalElements
          - totalPages
          type: object
          properties:
            pageNumber:
              type: number
              description: 현재 페이지 번호
            totalPages:
              type: number
              description: 전체 페이지 수
            orderList:
              type: array
              description: 판매 상품 목록
              items:
                required:
                - buyQuantity
                - buyStatus
                - customerId
                - orderProductId
                - productName
                - productPrice
                - regDateTime
                type: object
                properties:
                  regDateTime:
                    type: string
                    description: 등록 일시
                  buyStatus:
                    type: string
                    description: 구매 상태
                  customerId:
                    type: number
                    description: 구매자 ID
                  buyQuantity:
                    type: number
                    description: 구매 수량
                  orderProductId:
                    type: number
                    description: 주문 상품 ID
                  productPrice:
                    type: number
                    description: 상품 가격
                  productName:
                    type: string
                    description: 상품명
            pageSize:
              type: number
              description: 페이지 크기
            totalElements:
              type: number
              description: 전체 요소 수
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[response] cancel_order':
      title: "[response] cancel_order"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - result
          type: object
          properties:
            result:
              type: boolean
              description: 처리 결과
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[response] error':
      title: "[response] error"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - errorCode
          - errorMessage
          type: object
          properties:
            errorMessage:
              type: string
              description: 에러 메시지
            errorCode:
              type: number
              description: 에러 코드
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[response] reserve_product':
      title: "[response] reserve_product"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          type: array
          description: 응답 데이터
          items:
            required:
            - productId
            - reserveId
            type: object
            properties:
              reserveId:
                type: number
                description: 예약 ID
              productId:
                type: number
                description: 상품 ID
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[request] reserve_product':
      title: "[request] reserve_product"
      type: array
      items:
        required:
        - productId
        - quantity
        type: object
        properties:
          quantity:
            type: number
            description: 상품 수량 (필수)
          productId:
            type: number
            description: 상품 ID (필수)
    '[request] register_order':
      title: "[request] register_order"
      required:
      - receiverAddress
      - receiverName
      - receiverTel
      - totalPrice
      type: object
      properties:
        receiverAddress:
          description: 받는 사람 주소
          oneOf:
          - type: string
          - null
        receiverTel:
          type: string
          description: 받는 사람 전화번호
        reserveInfos:
          type: array
          description: 예약 정보 목록
          items:
            type: object
            properties:
              reserveId:
                type: number
                description: 예약 ID
                nullable: true
              productId:
                type: number
                description: 상품 ID
                nullable: true
        totalPrice:
          description: 총 금액
          oneOf:
          - null
          - type: number
        receiverName:
          description: 받는 사람 이름
          oneOf:
          - type: string
          - null

  securitySchemes:
    APIKey:
      type: apiKey
      name: Authorization
      in: header
security:
  - APIKey: []