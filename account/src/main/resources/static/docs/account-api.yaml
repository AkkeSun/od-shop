openapi: 3.0.1
info:
  title: Account API
  description: 사용자 정보와 토큰을 관리하는 API 입니다
  version: 0.0.1
servers:
- url: http://localhost:8081
tags: []
paths:
  /accounts:
    get:
      tags:
      - Account
      summary: 사용자 정보 조회 API
      description: 인증토큰으로 사용자 정보를 조회하는 API 입니다.
      operationId: "[FindAccountInfo] "
      parameters:
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: Bearer test-success-token
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] find-account-info"
              examples:
                '[FindAccountInfo] SUCCESS':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "id" : 1,
                        "email" : "test@google.com",
                        "username" : "od",
                        "userTel" : "01012341234",
                        "address" : "서울특별시 송파구",
                        "role" : "ROLE_CUSTOMER",
                        "regDate" : "20241212"
                      }
                    }
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[FindAccountInfo] 유효하지 않은 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3001,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[FindAccountInfo] 조회된 사용자 정보 없음':
                  value: |-
                    {
                      "httpStatus" : 404,
                      "message" : "NOT_FOUND",
                      "data" : {
                        "errorCode" : 2001,
                        "errorMessage" : "조회된 사용자 정보가 없습니다"
                      }
                    }
    put:
      tags:
      - Account
      summary: 사용자 수정 API
      description: 사용자 정보를 수정하는 API 입니다. <br>테스트시 우측 자물쇠를 클릭하여 유효한 인증 토큰을 입력해야 정상
        테스트가 가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[updateAccount] "
      parameters:
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: test-access-token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[REQUEST] update-account"
            examples:
              '[updateAccount] 유효하지 않은 전화번호 형식 입력':
                value: |-
                  {
                    "password" : "1234",
                    "passwordCheck" : "1234",
                    "username" : "od",
                    "userTel" : "010123",
                    "address" : "서울시 강남구"
                  }
              '[updateAccount] 비밀번호와 비밀번호 확인 불일치':
                value: |-
                  {
                    "password" : "1234",
                    "passwordCheck" : "12345",
                    "username" : "od",
                    "userTel" : "01022222323",
                    "address" : "서울시 강남구"
                  }
              '[updateAccount] 유효하지 않은 토큰 입력':
                value: |-
                  {
                    "password" : "111",
                    "passwordCheck" : "111",
                    "username" : "od",
                    "userTel" : "01012341234",
                    "address" : "서울시 강남구"
                  }
              '[updateAccount] 조회된 사용자 정보 없음':
                value: |-
                  {
                    "password" : "1234",
                    "passwordCheck" : "1234",
                    "username" : "od",
                    "userTel" : "01012341234",
                    "address" : "서울시 강남구"
                  }
              '[updateAccount] SUCCESS':
                value: |-
                  {
                    "password" : "1234",
                    "passwordCheck" : "1234",
                    "username" : "od",
                    "userTel" : "01022222323",
                    "address" : "서울시 강남구"
                  }
      responses:
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[updateAccount] 유효하지 않은 전화번호 형식 입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "올바른 전화번호 형식이 아닙니다."
                      }
                    }
                '[updateAccount] 비밀번호와 비밀번호 확인 불일치':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "비밀번호와 비밀번호 확인이 일치하지 않습니다."
                      }
                    }
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[updateAccount] 유효하지 않은 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3001,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[updateAccount] 조회된 사용자 정보 없음':
                  value: |-
                    {
                      "httpStatus" : 404,
                      "message" : "NOT_FOUND",
                      "data" : {
                        "errorCode" : 2001,
                        "errorMessage" : "조회된 사용자 정보가 없습니다"
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] update-account"
              examples:
                '[updateAccount] SUCCESS':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "updateYn" : "Y",
                        "updateList" : [ "username" ]
                      }
                    }
    post:
      tags:
      - Account
      summary: 사용자 등록 API
      description: 사용자를 등록하는 API 입니다.
      operationId: "[registerAccount] "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[REQUEST] register-account"
            examples:
              '[registerAccount] 권한 미입력':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "1234",
                    "passwordCheck" : "1234",
                    "role" : "",
                    "username" : "od",
                    "userTel" : "01012345678",
                    "address" : "서울시 강남구"
                  }
              '[registerAccount] SUCCESS':
                value: |-
                  {
                    "email" : "od@test.com",
                    "password" : "1234",
                    "passwordCheck" : "1234",
                    "role" : "ROLE_CUSTOMER",
                    "username" : "od",
                    "userTel" : "01012345678",
                    "address" : "서울시 강남구"
                  }
              '[registerAccount] 비밀번호와 비밀번호 확인 미일치':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "1234",
                    "passwordCheck" : "12345",
                    "role" : "ROLE_CUSTOMER",
                    "username" : "od",
                    "userTel" : "01012345678",
                    "address" : "서울시 강남구"
                  }
              '[registerAccount] 유효하지 않는 전화번호 패턴 입력':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "1234",
                    "passwordCheck" : "1234",
                    "role" : "ROLE_CUSTOMER",
                    "username" : "od",
                    "userTel" : "111",
                    "address" : "서울시 강남구"
                  }
              '[registerAccount] 비밀번호 미입력':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "",
                    "passwordCheck" : "1234",
                    "role" : "ROLE_CUSTOMER",
                    "username" : "od",
                    "userTel" : "01012345678",
                    "address" : "서울시 강남구"
                  }
              '[registerAccount] 유효하지 않는 권한 입력':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "1234",
                    "passwordCheck" : "1234",
                    "role" : "error",
                    "username" : "od",
                    "userTel" : "01012345678",
                    "address" : "서울시 강남구"
                  }
              '[registerAccount] 비밀번호 확인 미입력':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "1234",
                    "passwordCheck" : "",
                    "role" : "ROLE_CUSTOMER",
                    "username" : "od",
                    "userTel" : "01012345678",
                    "address" : "서울시 강남구"
                  }
      responses:
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[registerAccount] 권한 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "권한은 필수값 입니다."
                      }
                    }
                '[registerAccount] 비밀번호와 비밀번호 확인 미일치':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "비밀번호와 비밀번호 확인이 일치하지 않습니다."
                      }
                    }
                '[registerAccount] 유효하지 않는 전화번호 패턴 입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "올바른 전화번호 형식이 아닙니다."
                      }
                    }
                '[registerAccount] 비밀번호 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "비밀번호는 필수값 입니다."
                      }
                    }
                '[registerAccount] 유효하지 않는 권한 입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "유효하지 않은 권한 입니다."
                      }
                    }
                '[registerAccount] 비밀번호 확인 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "비밀번호 확인은 필수값 입니다."
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] register-account"
              examples:
                '[registerAccount] SUCCESS':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "accessToken" : "accessToken",
                        "refreshToken" : "refreshToken"
                      }
                    }
    delete:
      tags:
      - Account
      summary: 사용자 정보 삭제 API
      description: 사용자를 삭제하는 API 입니다. <br><br>테스트시 우측 자물쇠를 클릭하여 유효한 인증 토큰을 입력해야 정상
        테스트가 가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[deleteAccount] "
      parameters:
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: test-access-token
      responses:
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[deleteAccount] 조회된 사용자 정보 없음':
                  value: |-
                    {
                      "httpStatus" : 404,
                      "message" : "NOT_FOUND",
                      "data" : {
                        "errorCode" : 2001,
                        "errorMessage" : "조회된 사용자 정보가 없습니다"
                      }
                    }
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[deleteAccount] 유효하지 않은 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3001,
                        "errorMessage" : "유효한 인증 토큰이 아닙니다"
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] delete-account"
              examples:
                '[deleteAccount] SUCCESS':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "id" : 10,
                        "result" : "Y"
                      }
                    }
  /auth/login:
    post:
      tags:
      - Token
      summary: 인증 토큰 발급 API
      description: 이메일과 비밀번호로 인증 토큰을 발급하는 API 입니다.
      operationId: "[registerToken] "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[REQUEST] register-token"
            examples:
              '[registerToken] 비밀번호 미입력':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : ""
                  }
              '[registerToken] SUCCESS':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "1234"
                  }
              '[registerToken] 조회된 사용자 정보 없음':
                value: |-
                  {
                    "email" : "test@gmail.com",
                    "password" : "1111111"
                  }
              '[registerToken] 이메일 미입력':
                value: |-
                  {
                    "email" : "",
                    "password" : "1234"
                  }
      responses:
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[registerToken] 비밀번호 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "비밀번호는 필수값 입니다."
                      }
                    }
                '[registerToken] 이메일 미입력':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "이메일은 필수값 입니다."
                      }
                    }
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] register-token"
              examples:
                '[registerToken] SUCCESS':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "accessToken" : "Bearer testAccessToken",
                        "refreshToken" : "Bearer testRefreshToken"
                      }
                    }
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[registerToken] 조회된 사용자 정보 없음':
                  value: |-
                    {
                      "httpStatus" : 404,
                      "message" : "NOT_FOUND",
                      "data" : {
                        "errorCode" : 2001,
                        "errorMessage" : "조회된 사용자 정보가 없습니다"
                      }
                    }
  /auth/logout:
    delete:
      tags:
      - Token
      summary: 토큰 삭제 API
      description: 토큰을 삭제하는 API 입니다. <br>테스트시 우측 자물쇠를 클릭하여 유효한 인증 토큰을 입력해야 정상 테스트가
        가능합니다. <br>(요청 헤더에 인증 토큰을 입력하여 테스트하지 않습니다)
      operationId: "[deleteToken] 토큰 삭제 성공"
      parameters:
      - name: Authorization
        in: header
        description: 인증 토큰
        required: true
        schema:
          type: string
        example: test-access-token
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] SUCCESS"
              examples:
                '[deleteToken] 토큰 삭제 성공':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "result" : "Y"
                      }
                    }
  /auth/refresh:
    post:
      tags:
      - Token
      summary: 인증 토큰 갱신 API
      description: 리프래시 토큰으로 인증 토큰을 갱신하는 API 입니다. <br> 리프레시 토큰을 발급받은 기기와 다른 기기에서 시도하거
        리프레시토큰이 만료된 경우 갱신에 실패합니다.
      operationId: "[registerTokenByRefresh] "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[REQUEST] register-token-by-refresh"
            examples:
              '[registerTokenByRefresh] SUCCESS':
                value: |-
                  {
                    "refreshToken" : "valid-refresh-token"
                  }
              '[registerTokenByRefresh] 리프레시 토큰 누락':
                value: |-
                  {
                    "refreshToken" : ""
                  }
              '[registerTokenByRefresh] 유효하지 않은 리프레시 토큰 입력':
                value: |-
                  {
                    "refreshToken" : "invalid-refresh-token"
                  }
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] register-token"
              examples:
                '[registerTokenByRefresh] SUCCESS':
                  value: |-
                    {
                      "httpStatus" : 200,
                      "message" : "OK",
                      "data" : {
                        "accessToken" : "new-access-token",
                        "refreshToken" : "new-refresh-token"
                      }
                    }
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[registerTokenByRefresh] 리프레시 토큰 누락':
                  value: |-
                    {
                      "httpStatus" : 400,
                      "message" : "BAD_REQUEST",
                      "data" : {
                        "errorCode" : 1001,
                        "errorMessage" : "리프레시 토큰은 필수값 입니다."
                      }
                    }
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[RESPONSE] ERROR"
              examples:
                '[registerTokenByRefresh] 유효하지 않은 리프레시 토큰 입력':
                  value: |-
                    {
                      "httpStatus" : 401,
                      "message" : "UNAUTHORIZED",
                      "data" : {
                        "errorCode" : 3002,
                        "errorMessage" : "유효한 리프레시 토큰이 아닙니다"
                      }
                    }
components:
  schemas:
    '[REQUEST] register-token':
      title: "[REQUEST] register-token"
      required:
      - email
      - password
      type: object
      properties:
        password:
          type: string
          description: 비밀번호
        email:
          type: string
          description: 이메일
    '[REQUEST] update-account':
      title: "[REQUEST] update-account"
      required:
      - password
      - passwordCheck
      - username
      type: object
      properties:
        password:
          type: string
          description: 비밀번호
        address:
          type: string
          description: 주소 (100)
          nullable: true
        passwordCheck:
          type: string
          description: 비밀번호 확인
        userTel:
          type: string
          description: 전화번호 (01012341234 패턴)
          nullable: true
        username:
          type: string
          description: 사용자 이름
    '[RESPONSE] update-account':
      title: "[RESPONSE] update-account"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - updateList
          - updateYn
          type: object
          properties:
            updateYn:
              type: string
              description: "업데이트 유무 (Y, N)"
            updateList:
              type: array
              description: 업데이트 목록
              items:
                oneOf:
                - type: object
                - type: boolean
                - type: string
                - type: number
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[REQUEST] register-account':
      title: "[REQUEST] register-account"
      required:
      - email
      - password
      - passwordCheck
      - role
      type: object
      properties:
        password:
          type: string
          description: 비밀번호
        address:
          type: string
          description: 주소 (100)
          nullable: true
        role:
          type: string
          description: "권한 (ROLE_CUSTOMER, ROLE_SELLER)"
        passwordCheck:
          type: string
          description: 비밀번호 확인
        userTel:
          type: string
          description: 전화번호 (01012341234 패턴)
          nullable: true
        email:
          type: string
          description: 이메일 (50)
        username:
          type: string
          description: 이름 (10)
          nullable: true
    '[REQUEST] register-token-by-refresh':
      title: "[REQUEST] register-token-by-refresh"
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
          description: 리프레시 토큰
    '[RESPONSE] SUCCESS':
      title: "[RESPONSE] SUCCESS"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - result
          type: object
          properties:
            result:
              type: string
              description: 결과
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[RESPONSE] find-account-info':
      title: "[RESPONSE] find-account-info"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - address
          - email
          - id
          - regDate
          - role
          - userTel
          - username
          type: object
          properties:
            role:
              type: string
              description: 사용자 권한
            address:
              type: string
              description: 사용자 주소
            regDate:
              type: string
              description: 등록일
            userTel:
              type: string
              description: 사용자 전화번호
            id:
              type: number
              description: 사용자 아이디
            email:
              type: string
              description: 사용자 이메일
            username:
              type: string
              description: 사용자 이름
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[RESPONSE] delete-account':
      title: "[RESPONSE] delete-account"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - id
          - result
          type: object
          properties:
            result:
              type: string
              description: 삭제 유무
            id:
              type: number
              description: 사용자 아이디
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[RESPONSE] register-token':
      title: "[RESPONSE] register-token"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - accessToken
          - refreshToken
          type: object
          properties:
            accessToken:
              type: string
              description: 액세스 토큰
            refreshToken:
              type: string
              description: 리프레시 토큰
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[RESPONSE] register-account':
      title: "[RESPONSE] register-account"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - accessToken
          - refreshToken
          type: object
          properties:
            accessToken:
              type: string
              description: 액세스 토큰
            refreshToken:
              type: string
              description: 리프레시 토큰
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지
    '[RESPONSE] ERROR':
      title: "[RESPONSE] ERROR"
      required:
      - data
      - httpStatus
      - message
      type: object
      properties:
        data:
          required:
          - errorCode
          - errorMessage
          type: object
          properties:
            errorMessage:
              type: string
              description: 에러 메시지
            errorCode:
              type: number
              description: 에러 코드
          description: 응답 데이터
        httpStatus:
          type: number
          description: 상태 코드
        message:
          type: string
          description: 상태 메시지

  securitySchemes:
    APIKey:
      type: apiKey
      name: Authorization
      in: header
security:
  - APIKey: []